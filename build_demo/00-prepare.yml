---
- name: prepare demo lab
  hosts: localhost
  gather_facts: False

  vars:
    event: TechDayLux

  vars_files:
  - vault.yml

  collections:
  - ansible.platform
  - ansible.controller

  tasks:
  - name: Import pubkey into a new EC2 key pair
    amazon.aws.ec2_key:
      name: "{{ event }}_key"
      region: eu-central-1
      access_key: "{{ aws_access }}"
      secret_key: "{{ aws_secret }}"
      state: present
      key_material: "{{ ssh_public_key }}"

  - name: Create an S3 bucket to store the Terraform state file
    amazon.aws.s3_bucket:
      name: "{{ aws_bucket_name }}" 
      region: eu-central-1
      access_key: "{{ aws_access }}"
      secret_key: "{{ aws_secret }}"
      state: present

  - name: Create AAP organization
    ansible.platform.organization:
      name: "{{ event }}"
      state: present
      gateway_hostname: "{{ aap2_host }}"
      gateway_username: "{{ aap2_username }}"
      gateway_password: "{{ aap2_password }}"
      gateway_validate_certs: true

  - name: Add the EE that contains Terraform binary and collection
    ansible.controller.execution_environment:
      name: "EE_terraform"
      state: present
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: true
      image: ghcr.io/sebw/ee_terraform

  - name: Create credential that will allow AAP to access AWS
    ansible.controller.credential:
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: True
      name: "{{ event }} AWS creds"
      organization: "{{ event }}"
      state: present
      credential_type: "Amazon Web Services"
      inputs:
        username: "{{ aws_access }}"
        password: "{{ aws_secret }}"

  - name: Create Terraform State credential
    ansible.controller.credential:
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: true
      name: "{{ event }} Terraform state credential"
      credential_type: Terraform backend configuration
      organization: "{{ event }}"
      inputs:
        configuration: |
          bucket = "{{ aws_bucket_name }}"
          key = "state.tfstate"
          region = "eu-central-1"
          access_key = "{{ aws_access }}"
          secret_key = "{{ aws_secret }}"

  - name: Create machine credential to access EC2 instances
    ansible.controller.credential:
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: true
      name: "{{ event }} AWS EC2 SSH"
      credential_type: Machine
      organization: "{{ event }}"
      inputs:
        username: ec2-user
        ssh_key_data: "{{ ssh_private_key }}"

  - name: create an inventory
    ansible.controller.inventory:
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: true
      name: "{{ event }} inventory"
      organization: "{{ event }}"
      state: present

  - name: Add a dynamic source to the inventory using the TF state file
    ansible.controller.inventory_source:
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: true
      name: "Terraform State"
      description: Source for inventory
      execution_environment: "EE_terraform"
      inventory: "{{ event }} inventory"
      source: terraform
      credential: "{{ event }} Terraform state credential"
      overwrite: true
      update_on_launch: true
      organization: "{{ event }}"
      verbosity: 1
      source_vars:
        backend_type: s3
        hostnames:
        - public_dns

  - name: Create the project
    ansible.controller.project:
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: True
      name: "{{ event }}"
      organization: "{{ event }}"
      scm_type: git
      scm_update_on_launch: True
      scm_update_cache_timeout: 60
      scm_url: https://github.com/sebw/aap2_terraform_demo
      scm_branch: techday
      state: present

  - name: Update project before creating the jobs
    ansible.controller.project_update:
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: True
      project: "{{ event }}"
      timeout: 30
  
  - name: Create job for terraform plan
    ansible.controller.job_template:
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: True
      name: "1 - Terraform plan"
      job_type: "check"
      organization: "{{ event }}"
      state: present
      project: "{{ event }}"
      inventory: "{{ event }} inventory"
      playbook: "all-in-one/ansible/1-deploy.yml"
      execution_environment: EE_terraform
      credentials:
      - "{{ event }} AWS creds"
      - "{{ event }} Terraform state credential"

  - name: Create job for terraform apply
    ansible.controller.job_template:
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: True
      name: "2 - Terraform apply"
      job_type: "run"
      organization: "{{ event }}"
      state: present
      project: "{{ event }}"
      inventory: "{{ event }} inventory"
      playbook: "all-in-one/ansible/1-deploy.yml"
      execution_environment: EE_terraform
      credentials:
      - "{{ event }} AWS creds"
      - "{{ event }} Terraform state credential"

  - name: Create job for deploying Apache Web Server
    ansible.controller.job_template:
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: True
      name: "3 - Install Apache Web Server"
      organization: "{{ event }}"
      state: present
      project: "{{ event }}"
      inventory: "{{ event }} inventory"
      playbook: "all-in-one/ansible/2-apache.yml"
      credentials:
      - "{{ event }} AWS EC2 SSH"
      extra_vars:
        message: Hello World

  - name: Create job for deleting EC2 instances
    ansible.controller.job_template:
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: True
      name: "4 - Terraform destroy"
      organization: "{{ event }}"
      state: present
      project: "{{ event }}"
      inventory: "{{ event }} inventory"
      playbook: "all-in-one/ansible/3-destroy.yml"
      execution_environment: EE_terraform
      credentials:
      - "{{ event }} AWS creds"
      - "{{ event }} Terraform state credential"

  - name: Create a workflow that plugs everything together
    ansible.controller.workflow_job_template:
      name: "Workflow all in one"
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: True
      organization: "{{ event }}"
      state: present
      schema:
      - identifier: tf_plan
        unified_job_template:
          organization:
            name: "{{ event }}"
          name: "1 - Terraform plan"
          type: job_template
        related:
          success_nodes:
            - identifier: approve_plan
      - identifier: approve_plan
        all_parents_must_converge: false
        unified_job_template:
          organization:
            name: "{{ event }}"
          name: "Do you approve this terraform plan?"
          type: workflow_approval
          timeout: 300
        related:
          success_nodes:
            - identifier: tf_apply
      - identifier: tf_apply
        unified_job_template:
          organization:
            name: "{{ event }}"
          name: "2 - Terraform apply"
          alias: "tf plan"
          type: job_template
        related:
          success_nodes:
            - identifier: apache
          failure_nodes:
            - identifier: approve_cleanup
      - identifier: apache
        unified_job_template:
          organization:
            name: "{{ event }}"
          name: "3 - Install Apache Web Server"
          type: job_template
      - identifier: approve_cleanup
        all_parents_must_converge: false
        unified_job_template:
          organization:
            name: "{{ event }}"
          name: "Do you approve cleaning up EC2 instances?"
          type: workflow_approval
          timeout: 600
        related:
          success_nodes:
            - identifier: cleanup
      - identifier: cleanup
        all_parents_must_converge: false
        unified_job_template:
          organization:
            name: "{{ event }}"
          name: "4 - Terraform destroy"
          type: job_template
    tags: workflow
