---
- name: prepare AAP with all the components for the demo
  hosts: localhost
  gather_facts: False

  vars_files:
  - vault.yml

  collections:
  - ansible.platform
  - ansible.controller

  tasks:
  - name: Import pubkey into a new EC2 key pair
    amazon.aws.ec2_key:
      name: voxxed_key
      region: eu-central-1
      access_key: "{{ aws_access }}"
      secret_key: "{{ aws_secret }}"
      state: present
      key_material: "{{ ssh_public_key }}"

  - name: Create an S3 bucket to store the Terraform state file
    amazon.aws.s3_bucket:
      name: voxxedbucket
      region: eu-central-1
      access_key: "{{ aws_access }}"
      secret_key: "{{ aws_secret }}"
      state: present

  - name: Create AAP organization
    ansible.platform.organization:
      name: "voxxed"
      state: present
      gateway_hostname: "{{ aap2_host }}"
      gateway_username: "{{ aap2_username }}"
      gateway_password: "{{ aap2_password }}"
      gateway_validate_certs: true

  - name: Add the EE that contains Terraform binary and collection
    ansible.controller.execution_environment:
      name: "EE_terraform"
      state: present
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: true
      image: quay.io/acme_corp/terraform_ee

  - name: Create the project
    ansible.controller.project:
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: False
      name: "voxxed"
      organization: "voxxed"
      scm_type: git
      scm_update_on_launch: True
      scm_update_cache_timeout: 60
      scm_url: https://github.com/sebw/aap2_terraform_demo
      scm_branch: main
      state: present

  - name: Create credential that will allow AAP to access AWS
    ansible.controller.credential:
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: False
      name: "voxxed AWS creds"
      organization: "voxxed"
      state: present
      credential_type: "Amazon Web Services"
      inputs:
        username: "{{ aws_access }}"
        password: "{{ aws_secret }}"

  - name: Create Terraform State credential
    ansible.controller.credential:
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: true
      name: "voxxed Terraform state credential"
      credential_type: Terraform backend configuration
      organization: "voxxed"
      inputs:
        configuration: |
          bucket = "voxxedbucket"
          key = "state.tfstate"
          region = "eu-central-1"
          access_key = "{{ aws_access }}"
          secret_key = "{{ aws_secret }}"

  - name: Create machine credential to access EC2 instances
    ansible.controller.credential:
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: true
      name: "voxxed AWS EC2 SSH"
      credential_type: Machine
      organization: "voxxed"
      inputs:
        username: ec2-user
        ssh_key_data: "{{ ssh_private_key }}"

  - name: create an inventory
    ansible.controller.inventory:
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: true
      name: "voxxed inventory"
      organization: "voxxed"
      state: present

  - name: Add a dynamic source to the inventory using the TF state file
    ansible.controller.inventory_source:
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: true
      name: "Terraform State"
      description: Source for inventory
      execution_environment: "EE_terraform"
      inventory: "voxxed inventory"
      source: terraform
      credential: "voxxed Terraform state credential"
      overwrite: true
      update_on_launch: true
      organization: voxxed
      verbosity: 1
      source_vars:
        backend_type: s3
        hostnames:
        - public_dns

  - name: Create job for deploying EC2 instances
    ansible.controller.job_template:
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: True
      name: "Deploy EC2 instances"
      organization: "voxxed"
      state: present
      project: "voxxed"
      inventory: "voxxed inventory"
      playbook: "playbooks/1-deploy.yml"
      execution_environment: EE_terraform
      credentials:
      - "voxxed AWS creds"
      - "voxxed Terraform state credential"

  - name: Create job for deleting EC2 instances
    ansible.controller.job_template:
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: True
      name: "Destroy EC2 instances"
      organization: "voxxed"
      state: present
      project: "voxxed"
      inventory: "voxxed inventory"
      playbook: "playbooks/3-destroy.yml"
      execution_environment: EE_terraform
      credentials:
      - "voxxed AWS creds"
      - "voxxed Terraform state credential"

  - name: Create job for deploying Apache Web Server
    ansible.controller.job_template:
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: True
      name: "Install Apache Web Server"
      organization: "voxxed"
      state: present
      project: "voxxed"
      inventory: "voxxed inventory"
      playbook: "playbooks/2-apache.yml"
      credentials:
      - "voxxed AWS EC2 SSH"
      extra_vars:
        message: Hello World

  - name: Create a workflow that plugs everything together
    ansible.controller.workflow_job_template:
      name: "voxxed workflow TF + Ansible"
      controller_host: "{{ aap2_host }}"
      controller_username: "{{ aap2_username }}"
      controller_password: "{{ aap2_password }}"
      validate_certs: True
      organization: "voxxed"
      state: present
      schema:
      - identifier: provisioning
        unified_job_template:
          organization:
            name: "voxxed"
          name: "Deploy EC2 instances"
          alias: "Deploy EC2 with Terraform"
          type: job_template
        related:
          success_nodes:
            - identifier: post-provisioning
          failure_nodes:
            - identifier: approval
      - identifier: post-provisioning
        unified_job_template:
          organization:
            name: "voxxed"
          name: "Install Apache Web Server"
          alias: "Install Apache with Ansible"
          type: job_template
      - identifier: remediation
        all_parents_must_converge: false
        unified_job_template:
          organization:
            name: "voxxed"
          name: "Destroy EC2 instances"
          alias: "Clean up EC2 instances"
          type: job_template
      - identifier: approval
        all_parents_must_converge: false
        unified_job_template:
          organization:
            name: "voxxed"
          name: "approval"
          type: workflow_approval
          timeout: 120
        related:
          success_nodes:
            - identifier: remediation
